# name: ABAP AI Review (n8n)

# on:
#   pull_request:
#     types: [opened, synchronize, reopened]
#     paths:                           # ←追加
#       - '**/*.abap'                  # ←追加
#       - '**/*.prog.abap'             # ←追加  
#       - '**/*.clas.abap'             # ←追加
#       - '**/*.intf.abap'             # ←追加
#       - '**/*.incl.abap'             # ←追加

# permissions:
#   contents: read
#   pull-requests: write
#   issues: write

# env:
#   DIFF_MAX_BYTES: "120000"

# jobs:
#   review:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Setup jq
#         run: |
#           set -euo pipefail
#           sudo apt-get update -y
#           sudo apt-get install -y jq
          
#       - name: Collect ABAP diff
#         shell: bash
#         run: |
#           set -euo pipefail
#           git fetch origin "${{ github.base_ref }}" --depth=50 || true
#           git diff --unified=0 "origin/${{ github.base_ref }}...HEAD" \
#             -- '**/*.abap' '**/*.prog.abap' '**/*.clas.abap' '**/*.intf.abap' '**/*.incl.abap' > diff.patch || true
#           #    ↑ **/ を追加してサブディレクトリも対象にする
#           head -c "${DIFF_MAX_BYTES}" diff.patch > diff.trunc.patch || true
#           wc -c diff.trunc.patch || true

#       - name: Skip if no diff
#         id: guard
#         shell: bash
#         run: |
#           if [ ! -s diff.trunc.patch ]; then
#             echo "No ABAP diff. Skipping review."
#             echo "skip=true" >> "$GITHUB_OUTPUT"
#           fi

#       - name: Call n8n Webhook
#         if: steps.guard.outputs.skip != 'true'
#         env:
#           N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}
#         shell: bash
#         run: |
#           set -euo pipefail
          
#           # n8n Webhook URLの確認
#           [ -n "${N8N_WEBHOOK_URL:-}" ] || { echo "ERROR: N8N_WEBHOOK_URL is empty."; exit 1; }

#           # リクエストボディの作成
#           BODY=$(jq -n \
#             --arg diff  "$(cat diff.trunc.patch)" \
#             --arg repo  "${{ github.repository }}" \
#             --arg pr    "${{ github.event.number }}" \
#             --arg author "${{ github.actor }}" \
#             --arg title  "${{ github.event.pull_request.title }}" \
#             --arg body   "${{ github.event.pull_request.body }}" \
#             '{
#                repository: $repo,
#                pull_request: ($pr|tonumber),
#                diff: $diff,
#                author: $author,
#                title: $title,
#                body: $body,
#                changed_files: []
#              }')

#           # n8nへのリクエスト送信
#           RESP=$(curl -sS -L -w "\n%{http_code}" \
#             -H "Content-Type: application/json" \
#             -d "$BODY" \
#             "$N8N_WEBHOOK_URL" || true)

#           HTTP_CODE=$(echo "$RESP" | tail -n1)
#           RESPONSE=$(echo "$RESP" | sed '$d')
          
#           # レスポンスの確認
#           if ! echo "$HTTP_CODE" | grep -qE '^2[0-9][0-9]$'; then
#             echo "n8n webhook error (HTTP $HTTP_CODE):"
#             echo "$RESPONSE"
#             exit 1
#           else
#             echo "n8n webhook succeeded (HTTP $HTTP_CODE)"
#             echo "$RESPONSE"
#           fi

#       # 成功時のサマリー
#       - name: Add summary
#         if: steps.guard.outputs.skip != 'true'
#         shell: bash
#         run: |
#           {
#             echo "### ✅ ABAP AI Review Completed"
#             echo
#             echo "- **Repository**: ${{ github.repository }}"
#             echo "- **PR**: #${{ github.event.number }}"
#             echo "- **Author**: ${{ github.actor }}"
#             echo "- **Review System**: n8n + Gemini AI"
#             echo
#             echo "レビューコメントがPRに投稿されました。"
#           } >> "$GITHUB_STEP_SUMMARY"

name: ABAP AI Review (n8n)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.abap'
      - '**/*.prog.abap'
      - '**/*.clas.abap'
      - '**/*.intf.abap'
      - '**/*.incl.abap'

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  DIFF_MAX_BYTES: "120000"

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      # ★ PR の head を明示して checkout（merge commit を使わない）
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Collect ABAP diff
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"

          # 念のため両端を取得
          git fetch --no-tags --depth=200 origin "$BASE" "$HEAD" || true

          # ★ 二点比較（..）で確実に差分を取る
          git diff --unified=0 "$BASE..$HEAD" \
            -- '**/*.abap' '**/*.prog.abap' '**/*.clas.abap' '**/*.intf.abap' '**/*.incl.abap' \
            > diff.patch || true

          head -c "${DIFF_MAX_BYTES}" diff.patch > diff.trunc.patch || true

          if [[ -s diff.trunc.patch ]]; then
            echo "has_diff=true" >> "$GITHUB_OUTPUT"
            { echo "patch<<EOF"; cat diff.trunc.patch; echo "EOF"; } >> "$GITHUB_OUTPUT"
          else
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Call n8n Webhook
        if: steps.diff.outputs.has_diff == 'true'
        env:
          N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${N8N_WEBHOOK_URL:-}" ] || { echo "ERROR: N8N_WEBHOOK_URL is empty."; exit 1; }

          BODY=$(jq -n \
            --arg diff  "${{ steps.diff.outputs.patch }}" \
            --arg repo  "${{ github.repository }}" \
            --arg pr    "${{ github.event.number }}" \
            --arg author "${{ github.actor }}" \
            --arg title  "${{ github.event.pull_request.title }}" \
            --arg prbody "${{ github.event.pull_request.body }}" \
            '{
               repository: $repo,
               pull_request: ($pr|tonumber),
               diff: $diff,
               author: $author,
               title: $title,
               body: $prbody
             }')

          RESP=$(curl -sS -L -w "\n%{http_code}" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$N8N_WEBHOOK_URL" || true)

          CODE=$(echo "$RESP" | tail -n1)
          PAYL=$(echo "$RESP" | sed '$d')

          if ! echo "$CODE" | grep -qE '^2[0-9][0-9]$'; then
            echo "n8n webhook error (HTTP $CODE):"
            echo "$PAYL"
            exit 1
          else
            echo "n8n webhook succeeded (HTTP $CODE)"
            echo "$PAYL"
          fi

      - name: Add summary
        if: steps.diff.outputs.has_diff == 'true'
        run: |
          {
            echo "### ✅ ABAP AI Review Completed"
            echo
            echo "- **Repository**: ${{ github.repository }}"
            echo "- **PR**: #${{ github.event.number }}"
            echo "- **Author**: ${{ github.actor }}"
            echo "- **Review System**: n8n + Gemini AI"
          } >> "$GITHUB_STEP_SUMMARY"
