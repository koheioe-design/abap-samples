name: ABAP AI Review (n8n)
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.abap'
      - '**/*.prog.abap'
      - '**/*.clas.abap' 
      - '**/*.intf.abap'
      - '**/*.incl.abap'
permissions:
  contents: read
  pull-requests: write
  issues: write
env:
  DIFF_MAX_BYTES: "120000"
jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      
      - name: Setup jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq
      
      - name: Debug changed files
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          
          echo "=== All changed files ==="
          git diff --name-only "$BASE..$HEAD" || true
          
          echo "=== ABAP-related files ==="
          git diff --name-only "$BASE..$HEAD" | grep -iE '\.(abap|prog\.abap|clas\.abap|intf\.abap|incl\.abap)$' || echo "No ABAP files found"
          
          echo "=== Sample of actual diff ==="
          git diff "$BASE..$HEAD" | head -20 || true
      
      - name: Collect ABAP diff
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          
          # 念のため両端を取得
          git fetch --no-tags --depth=200 origin "$BASE" "$HEAD" || true
          
          # まず全ファイルの差分を取得
          git diff --unified=0 "$BASE..$HEAD" > all_diff.patch || true
          
          # ABAPファイルのみを抽出する改良版
          if git diff --name-only "$BASE..$HEAD" | grep -qiE '\.(abap|prog\.abap|clas\.abap|intf\.abap|incl\.abap)$'; then
            echo "✅ ABAP files found in changeset"
            
            # ABAP関連ファイルのリストを取得
            ABAP_FILES=$(git diff --name-only "$BASE..$HEAD" | grep -iE '\.(abap|prog\.abap|clas\.abap|intf\.abap|incl\.abap)$' | tr '\n' ' ')
            echo "ABAP files: $ABAP_FILES"
            
            # ABAP関連ファイルのみの差分を取得
            echo "$ABAP_FILES" | xargs -n1 echo | while read -r file; do
              if [[ -n "$file" ]]; then
                echo "Processing: $file"
                git diff --unified=0 "$BASE..$HEAD" -- "$file" || true
              fi
            done > abap_diff.patch || true
            
            # サイズ制限を適用
            head -c "${DIFF_MAX_BYTES}" abap_diff.patch > diff.trunc.patch || true
            
            if [[ -s diff.trunc.patch ]]; then
              echo "has_diff=true" >> "$GITHUB_OUTPUT"
              { echo "patch<<EOF"; cat diff.trunc.patch; echo "EOF"; } >> "$GITHUB_OUTPUT"
              echo "✅ ABAP diff collected ($(wc -c < diff.trunc.patch) bytes)"
            else
              echo "has_diff=false" >> "$GITHUB_OUTPUT"
              echo "❌ ABAP diff is empty"
            fi
          else
            # ABAPファイルがない場合でも、パストリガーがある場合は処理する
            echo "⚠️ No ABAP files in changeset, but triggered by path filter"
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
          fi
      
      - name: Skip if no diff
        if: steps.diff.outputs.has_diff != 'true'
        run: |
          echo "No ABAP diff. Skipping review."
      
      - name: Call n8n Webhook  
        if: steps.diff.outputs.has_diff == 'true'
        env:
          N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}
        shell: bash
        run: |
          set -euo pipefail
          
          # Webhook URLチェック
          if [[ -z "${N8N_WEBHOOK_URL:-}" ]]; then
            echo "❌ ERROR: N8N_WEBHOOK_URL is not set in repository secrets"
            echo "Please add N8N_WEBHOOK_URL to your repository secrets"
            exit 1
          fi
          
          echo "🚀 Calling n8n webhook..."
          echo "URL: $(echo "$N8N_WEBHOOK_URL" | sed 's|/[^/]*$|/***|')"
          
          # JSONペイロード作成
          BODY=$(jq -n \
            --arg diff  "${{ steps.diff.outputs.patch }}" \
            --arg repo  "${{ github.repository }}" \
            --arg pr    "${{ github.event.number }}" \
            --arg author "${{ github.actor }}" \
            --arg title  "${{ github.event.pull_request.title }}" \
            --arg prbody "${{ github.event.pull_request.body }}" \
            '{
               repository: $repo,
               pull_request: ($pr|tonumber),
               diff: $diff,
               author: $author,
               title: $title,
               body: $prbody,
               timestamp: now
             }')
          
          echo "📤 Payload size: $(echo "$BODY" | wc -c) bytes"
          
          # Webhook呼び出し（タイムアウト設定付き）
          RESP=$(curl -sS -L -w "\n%{http_code}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions/ABAP-Review" \
            --max-time 60 \
            --retry 2 \
            --retry-delay 5 \
            -d "$BODY" \
            "$N8N_WEBHOOK_URL" 2>&1 || echo -e "\nERROR")
          
          CODE=$(echo "$RESP" | tail -n1)
          PAYL=$(echo "$RESP" | sed '$d')
          
          echo "📥 Response:"
          echo "HTTP Code: $CODE"
          echo "Payload: $PAYL"
          
          if [[ "$CODE" == "ERROR" ]]; then
            echo "❌ Connection to n8n failed"
            echo "Please check:"
            echo "1. n8n service is running"
            echo "2. Webhook URL is accessible from internet"
            echo "3. n8n workflow is active"
            exit 1
          elif echo "$CODE" | grep -qE '^2[0-9][0-9]$'; then
            echo "✅ n8n webhook succeeded (HTTP $CODE)"
          else
            echo "⚠️ n8n webhook returned HTTP $CODE"
            echo "Check n8n workflow logs for details"
            # 2xx以外でも続行（n8nが処理している可能性）
          fi
      
      - name: Add summary
        if: steps.diff.outputs.has_diff == 'true'
        run: |
          {
            echo "### ✅ ABAP AI Review Completed"
            echo
            echo "- **Repository**: ${{ github.repository }}"
            echo "- **PR**: #${{ github.event.number }}"
            echo "- **Author**: ${{ github.actor }}"
            echo "- **Review System**: n8n + Gemini AI"
            echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          } >> "$GITHUB_STEP_SUMMARY"
