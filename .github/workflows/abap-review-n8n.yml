name: ABAP AI Review (n8n) - Debug
on:
  pull_request:
    types: [opened, synchronize, reopened]
permissions:
  contents: read
  pull-requests: write
  issues: write
env:
  DIFF_MAX_BYTES: "120000"
jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      
      - name: Setup jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq
      
      # ÂÆåÂÖ®„Å™„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂèéÈõÜ
      - name: Complete Debug Info
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          
          echo "=== PR Information ==="
          echo "Base: $BASE"
          echo "Head: $HEAD"
          echo "Repository: ${{ github.repository }}"
          echo "PR Number: ${{ github.event.number }}"
          
          echo ""
          echo "=== ALL Changed Files ==="
          git diff --name-only "$BASE..$HEAD" || true
          
          echo ""
          echo "=== Files with Extensions ==="
          git diff --name-only "$BASE..$HEAD" | while read file; do
            if [[ -n "$file" ]]; then
              echo "File: $file"
              echo "  Extension: ${file##*.}"
              echo "  Full name check: $(echo "$file" | grep -E '\.(abap|prog\.abap|clas\.abap|intf\.abap|incl\.abap)$' || echo 'Not ABAP')"
            fi
          done || true
          
          echo ""
          echo "=== Raw diff output (first 50 lines) ==="
          git diff "$BASE..$HEAD" | head -50 || true
          
          echo ""
          echo "=== Checking for any .abap files ==="
          find . -name "*.abap" -type f | head -10 || echo "No .abap files found in repository"
          
          echo ""
          echo "=== Directory structure sample ==="
          find . -type f | head -20 || true
      
      # Êù°‰ª∂„ÇíÁ∑©Âíå„Åó„Å¶Â∑ÆÂàÜ„ÇíÂèñÂæó
      - name: Collect ANY diff (for testing)
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          
          # „Å®„Çä„ÅÇ„Åà„Åö‰Ωï„ÅãÂ§âÊõ¥„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
          git diff --unified=0 "$BASE..$HEAD" > all_diff.patch || true
          
          if [[ -s all_diff.patch ]]; then
            echo "=== Found general diff ==="
            echo "has_diff=true" >> "$GITHUB_OUTPUT"
            head -c "${DIFF_MAX_BYTES}" all_diff.patch > diff.trunc.patch
            { echo "patch<<EOF"; cat diff.trunc.patch; echo "EOF"; } >> "$GITHUB_OUTPUT"
            echo "‚úÖ General diff found (will check for ABAP content)"
            
            # ABAPÈñ¢ÈÄ£„ÅÆÂ§âÊõ¥„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            if git diff --name-only "$BASE..$HEAD" | grep -qE '\.(abap|prog\.abap|clas\.abap|intf\.abap|incl\.abap)$'; then
              echo "üéØ ABAP files detected in changes"
            else
              echo "‚ö†Ô∏è No ABAP files in changes, but proceeding for debug"
            fi
          else
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
            echo "‚ùå No diff found at all"
          fi
      
      - name: Test n8n Webhook (if any diff)
        if: steps.diff.outputs.has_diff == 'true'
        env:
          N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}
        shell: bash
        run: |
          set -euo pipefail
          
          echo "üß™ Testing n8n webhook connection..."
          
          # Webhook URL„ÅÆÁ¢∫Ë™ç
          if [[ -z "${N8N_WEBHOOK_URL:-}" ]]; then
            echo "‚ùå ERROR: N8N_WEBHOOK_URL is not set in secrets"
            exit 1
          fi
          
          echo "‚úÖ Webhook URL is configured"
          echo "URL pattern: $(echo "$N8N_WEBHOOK_URL" | sed 's/[^/]*$/***/')"
          
          # „ÉÜ„Çπ„ÉàÁî®„ÅÆÁ∞°Âçò„Å™„Éö„Ç§„É≠„Éº„Éâ
          BODY=$(jq -n \
            --arg repo  "${{ github.repository }}" \
            --arg pr    "${{ github.event.number }}" \
            --arg test  "debug-run" \
            '{
               repository: $repo,
               pull_request: ($pr|tonumber),
               test_mode: true,
               message: "Testing webhook connectivity"
             }')
          
          echo "üì§ Sending test payload..."
          
          # WebhookÂëº„Å≥Âá∫„Åó
          RESP=$(curl -sS -L -w "\n%{http_code}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions" \
            --max-time 30 \
            -d "$BODY" \
            "$N8N_WEBHOOK_URL" || echo -e "\nERROR")
          
          CODE=$(echo "$RESP" | tail -n1)
          PAYL=$(echo "$RESP" | sed '$d')
          
          echo "üì• Response received:"
          echo "HTTP Code: $CODE"
          echo "Payload: $PAYL"
          
          if [[ "$CODE" == "ERROR" ]]; then
            echo "‚ùå Connection failed - check n8n webhook URL and n8n service status"
            exit 1
          elif echo "$CODE" | grep -qE '^2[0-9][0-9]$'; then
            echo "‚úÖ n8n webhook test successful!"
          else
            echo "‚ö†Ô∏è n8n responded with HTTP $CODE"
            echo "This might still work - check n8n workflow logs"
          fi
      
      - name: Summary
        if: always
