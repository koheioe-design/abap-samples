name: ABAP AI Review (n8n)
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.abap'
      - '**/*.prog.abap'
      - '**/*.clas.abap'
      - '**/*.intf.abap'
      - '**/*.incl.abap'
permissions:
  contents: read
  pull-requests: write
  issues: write
env:
  DIFF_MAX_BYTES: "120000"
jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      # ★ PR の head を明示して checkout（merge commit を使わない）
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      
      - name: Setup jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq
      
      # デバッグ: 変更されたファイルを確認
      - name: Debug - List changed files
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          echo "=== All changed files ==="
          git diff --name-only "$BASE..$HEAD" || true
          echo "=== ABAP-like files ==="
          git diff --name-only "$BASE..$HEAD" | grep -E '\.(abap|prog\.abap|clas\.abap|intf\.abap|incl\.abap)$' || echo "No ABAP files found"
      
      - name: Collect ABAP diff
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          
          # 念のため両端を取得
          git fetch --no-tags --depth=200 origin "$BASE" "$HEAD" || true
          
          # より柔軟なパスマッチングを試行
          echo "=== Trying git diff with various patterns ==="
          
          # パターン1: 基本のglobパターン
          git diff --unified=0 --name-only "$BASE..$HEAD" \
            -- '*.abap' '*.prog.abap' '*.clas.abap' '*.intf.abap' '*.incl.abap' \
               '*/*.abap' '*/*.prog.abap' '*/*.clas.abap' '*/*.intf.abap' '*/*.incl.abap' \
               '*/*/*.abap' '*/*/*.prog.abap' '*/*/*.clas.abap' '*/*/*.intf.abap' '*/*/*.incl.abap' || true
          
          # パターン2: すべてのファイルから後でフィルタ
          git diff --unified=0 "$BASE..$HEAD" > all_diff.patch || true
          grep -E '^\+\+\+ b/.*\.(abap|prog\.abap|clas\.abap|intf\.abap|incl\.abap)$' all_diff.patch || echo "No ABAP file headers found"
          
          # 実際の差分を取得（改良版）
          git diff --unified=0 "$BASE..$HEAD" | \
            awk '
            /^\+\+\+ b\/.*\.(abap|prog\.abap|clas\.abap|intf\.abap|incl\.abap)$/ { abap_file=1; print; next }
            /^\+\+\+ / { abap_file=0 }
            abap_file { print }
            /^diff --git/ && /\.(abap|prog\.abap|clas\.abap|intf\.abap|incl\.abap) / { print }
            ' > diff.patch || true
          
          head -c "${DIFF_MAX_BYTES}" diff.patch > diff.trunc.patch || true
          
          echo "=== Generated diff size ==="
          wc -c diff.trunc.patch || true
          echo "=== First few lines of diff ==="
          head -10 diff.trunc.patch || true
          
          if [[ -s diff.trunc.patch ]]; then
            echo "has_diff=true" >> "$GITHUB_OUTPUT"
            { echo "patch<<EOF"; cat diff.trunc.patch; echo "EOF"; } >> "$GITHUB_OUTPUT"
            echo "✅ ABAP diff found and processed"
          else
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
            echo "❌ No ABAP diff found"
          fi
      
      - name: Skip if no diff
        if: steps.diff.outputs.has_diff != 'true'
        run: |
          echo "No ABAP diff. Skipping review."
      
      - name: Call n8n Webhook
        if: steps.diff.outputs.has_diff == 'true'
        env:
          N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${N8N_WEBHOOK_URL:-}" ] || { echo "ERROR: N8N_WEBHOOK_URL is empty."; exit 1; }
          
          echo "🚀 Calling n8n webhook..."
          
          BODY=$(jq -n \
            --arg diff  "${{ steps.diff.outputs.patch }}" \
            --arg repo  "${{ github.repository }}" \
            --arg pr    "${{ github.event.number }}" \
            --arg author "${{ github.actor }}" \
            --arg title  "${{ github.event.pull_request.title }}" \
            --arg prbody "${{ github.event.pull_request.body }}" \
            '{
               repository: $repo,
               pull_request: ($pr|tonumber),
               diff: $diff,
               author: $author,
               title: $title,
               body: $prbody
             }')
          
          RESP=$(curl -sS -L -w "\n%{http_code}" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$N8N_WEBHOOK_URL" || true)
          
          CODE=$(echo "$RESP" | tail -n1)
          PAYL=$(echo "$RESP" | sed '$d')
          
          if ! echo "$CODE" | grep -qE '^2[0-9][0-9]$'; then
            echo "❌ n8n webhook error (HTTP $CODE):"
            echo "$PAYL"
            exit 1
          else
            echo "✅ n8n webhook succeeded (HTTP $CODE)"
            echo "$PAYL"
          fi
      
      - name: Add summary
        if: steps.diff.outputs.has_diff == 'true'
        run: |
          {
            echo "### ✅ ABAP AI Review Completed"
            echo
            echo "- **Repository**: ${{ github.repository }}"
            echo "- **PR**: #${{ github.event.number }}"
            echo "- **Author**: ${{ github.actor }}"
            echo "- **Review System**: n8n + Gemini AI"
          } >> "$GITHUB_STEP_SUMMARY"
